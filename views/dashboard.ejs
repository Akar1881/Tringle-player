<!DOCTYPE html>
<html lang="en" class="<%= locals.theme === 'dark' ? 'dark' : '' %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Tringle Player</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .dark {
            background-color: #111827;
            color: #f3f4f6;
        }
        .dark .bg-white {
            background-color: #1f2937;
        }
        .dark .text-gray-700 {
            color: #f3f4f6;
        }
        .dark .border {
            border-color: #374151;
        }
        .dark input[type="text"],
        .dark input[type="email"],
        .dark input[type="password"] {
            background-color: #374151;
            color: #f3f4f6;
            border-color: #4b5563;
        }
        .dark input[type="file"]::file-selector-button {
            background-color: #3b82f6;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }
        .dark input[type="file"]::file-selector-button:hover {
            background-color: #2563eb;
        }
        .progress-container {
            width: 100%;
            background-color: #f0f0f0;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        .dark .progress-container {
            background-color: #374151;
        }
        .progress-bar {
            width: 0%;
            height: 20px;
            background-color: #3b82f6;
            text-align: center;
            line-height: 20px;
            color: white;
            transition: width 0.3s ease;
        }
        .delete-modal, .copy-modal, .view-modal {
            display: none;
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            width: 90%;
            max-width: 800px;
            animation: slideUp 0.3s ease;
        }
        .dark .delete-modal, .dark .copy-modal, .dark .view-modal {
            background-color: #1f2937;
            border: 1px solid #374151;
        }
        @keyframes slideUp {
            from {
                transform: translate(-50%, 100%);
                opacity: 0;
            }
            to {
                transform: translate(-50%, 0);
                opacity: 1;
            }
        }
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            animation: fadeIn 0.3s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        input[type="file"] {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #e2e8f0;
            width: 100%;
            cursor: pointer;
        }
        .dark input[type="file"] {
            border-color: #4b5563;
            color: #f3f4f6;
        }
        input[type="file"]::file-selector-button {
            background-color: #3b82f6;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            margin-right: 16px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        input[type="file"]::file-selector-button:hover {
            background-color: #2563eb;
        }
        .dark .text-gray-500 {
            color: #9ca3af;
        }
        .dark .text-gray-600 {
            color: #d1d5db;
        }
        .copy-notification {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            display: none;
            animation: fadeInUp 0.3s ease;
        }
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translate(-50%, 20px);
            }
            to {
                opacity: 1;
                transform: translate(-50%, 0);
            }
        }
        .video-preview {
            width: 100%;
            max-width: 100%;
            aspect-ratio: 16/9;
            background: #000;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900">
    <nav class="bg-white shadow-lg mb-8 dark:bg-gray-800">
        <div class="max-w-6xl mx-auto px-4">
            <div class="flex justify-between">
                <div class="flex space-x-7">
                    <div>
                        <a href="/" class="flex items-center py-4">
                            <img src="<%= config.smallLogoPath %>" alt="Logo" class="h-8 w-8 mr-2">
                            <span class="font-semibold text-gray-500 text-lg dark:text-gray-300">Tringle Player</span>
                        </a>
                    </div>
                </div>
                <div class="flex items-center space-x-3">
                    <button onclick="toggleTheme()" class="py-2 px-4 bg-gray-500 text-white rounded hover:bg-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600">
                        <i class="fas fa-moon dark:fa-sun"></i>
                    </button>
                    <a href="/logout" class="py-2 px-4 bg-red-500 text-white rounded hover:bg-red-600">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4">
        <div class="bg-white rounded-lg shadow-md p-6 mb-8 dark:bg-gray-800 dark:shadow-xl">
            <h2 class="text-2xl font-bold mb-4 dark:text-gray-100">Upload Video</h2>
            <% if (locals.error) { %>
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 dark:bg-red-900 dark:border-red-700 dark:text-red-100">
                    <%= error %>
                </div>
            <% } %>
            <form id="uploadForm" class="space-y-4">
                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2 dark:text-gray-300" for="title">
                        Video Title
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600"
                           id="title" type="text" name="title" required>
                </div>
                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2 dark:text-gray-300" for="video">
                        Video File (Max <%= (config.maxFileSize / (1024 * 1024 * 1024)).toFixed(1) %>GB)
                    </label>
                    <input class="file-input dark:text-gray-300"
                           id="video" type="file" name="video" accept="video/*" required>
                </div>
                <div id="progressContainer" class="progress-container hidden">
                    <div id="progressBar" class="progress-bar">0%</div>
                </div>
                <div id="uploadWarning" class="text-red-500 hidden dark:text-red-400">
                    Please do not close this page while upload is in progress!
                </div>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                        type="submit">
                    Upload Video
                </button>
            </form>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 dark:bg-gray-800 dark:shadow-xl">
            <h2 class="text-2xl font-bold mb-4 dark:text-gray-100">Your Videos (<span id="videoCount"><%= videos.length %></span>/<%= config.maxVideosPerUser %>)</h2>
            <div class="space-y-4">
                <% videos.forEach(function(video) { %>
                    <div class="border rounded-lg p-4 flex justify-between items-center dark:border-gray-700">
                        <div class="flex-grow">
                            <h3 class="font-bold dark:text-gray-100"><%= video.title %></h3>
                            <div class="mt-2">
                                <button class="text-blue-500 hover:text-blue-700 mr-4 dark:text-blue-400 dark:hover:text-blue-300" onclick="showCopyConfirmation('<%= config.embedDomain %>/embed/<%= video.id %>', '<%= video.title %>')">
                                    <i class="fas fa-code mr-1"></i> Copy Embed Code
                                </button>
                                <button class="text-green-500 hover:text-green-700 mr-4 dark:text-green-400 dark:hover:text-green-300" onclick="showVideoPreview('<%= config.embedDomain %>/embed/<%= video.id %>', '<%= video.title %>')">
                                    <i class="fas fa-play mr-1"></i> View Video
                                </button>
                                <span class="text-gray-500 dark:text-gray-400">Size: <%= (video.size / (1024 * 1024)).toFixed(1) %> MB</span>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <label class="cursor-pointer bg-blue-500 text-white px-3 py-2 rounded hover:bg-blue-600">
                                <i class="fas fa-upload mr-1"></i> Replace
                                <input type="file" class="hidden" onchange="replaceVideo(<%= video.id %>, this)" accept="video/*">
                            </label>
                            <button class="bg-red-500 text-white px-3 py-2 rounded hover:bg-red-600" onclick="showDeleteConfirmation(<%= video.id %>)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>

    <div id="modalOverlay" class="modal-overlay"></div>
    
    <div id="deleteModal" class="delete-modal">
        <div class="text-center">
            <i class="fas fa-exclamation-triangle text-yellow-500 text-4xl mb-4"></i>
            <h3 class="text-xl font-bold mb-4 dark:text-gray-100">Delete Video?</h3>
            <p class="mb-6 text-gray-600 dark:text-gray-400">Are you sure you want to delete this video? This action cannot be undone.</p>
            <div class="flex justify-center space-x-4">
                <button id="confirmDelete" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                    Delete
                </button>
                <button onclick="hideDeleteConfirmation()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <div id="copyModal" class="copy-modal">
        <div class="text-center">
            <i class="fas fa-code text-blue-500 text-4xl mb-4"></i>
            <h3 class="text-xl font-bold mb-4 dark:text-gray-100">Copy Embed Code?</h3>
            <p class="mb-6 text-gray-600 dark:text-gray-400">Are you sure you want to copy the embed code for "<span id="copyVideoTitle"></span>"?</p>
            <div class="flex justify-center space-x-4">
                <button id="confirmCopy" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    Copy
                </button>
                <button onclick="hideCopyConfirmation()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <div id="viewModal" class="view-modal">
        <div class="text-center">
            <h3 class="text-xl font-bold mb-4 dark:text-gray-100">Streaming: "<span id="viewVideoTitle"></span>"</h3>
            <div class="video-preview">
                <iframe id="videoPreview" width="100%" height="100%" frameborder="0" allowfullscreen></iframe>
            </div>
            <button onclick="hideVideoPreview()" class="bg-gray-500 text-white px-6 py-2 rounded hover:bg-gray-600">
                Exit View
            </button>
        </div>
    </div>

    <div id="copyNotification" class="copy-notification">
        Embed code copied to clipboard!
    </div>

    <script>
        let currentDeleteId = null;
        let currentEmbedUrl = null;

        function showDeleteConfirmation(videoId) {
            currentDeleteId = videoId;
            document.getElementById('modalOverlay').style.display = 'block';
            document.getElementById('deleteModal').style.display = 'block';
        }

        function hideDeleteConfirmation() {
            document.getElementById('modalOverlay').style.display = 'none';
            document.getElementById('deleteModal').style.display = 'none';
            currentDeleteId = null;
        }

        function showCopyConfirmation(embedUrl, videoTitle) {
            currentEmbedUrl = embedUrl;
            document.getElementById('copyVideoTitle').textContent = videoTitle;
            document.getElementById('modalOverlay').style.display = 'block';
            document.getElementById('copyModal').style.display = 'block';
        }

        function hideCopyConfirmation() {
            document.getElementById('modalOverlay').style.display = 'none';
            document.getElementById('copyModal').style.display = 'none';
            currentEmbedUrl = null;
        }

        function showVideoPreview(embedUrl, videoTitle) {
            document.getElementById('viewVideoTitle').textContent = videoTitle;
            document.getElementById('videoPreview').src = embedUrl;
            document.getElementById('modalOverlay').style.display = 'block';
            document.getElementById('viewModal').style.display = 'block';
        }

        function hideVideoPreview() {
            document.getElementById('modalOverlay').style.display = 'none';
            document.getElementById('viewModal').style.display = 'none';
            document.getElementById('videoPreview').src = '';
        }

        document.getElementById('confirmDelete').addEventListener('click', function() {
            if (currentDeleteId) {
                fetch(`/video/${currentDeleteId}`, {
                    method: 'DELETE'
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete video');
                    }
                });
            }
            hideDeleteConfirmation();
        });

        document.getElementById('confirmCopy').addEventListener('click', function() {
            if (currentEmbedUrl) {
                const embedCode = `<iframe src="${currentEmbedUrl}" width="640" height="360" frameborder="0" allowfullscreen></iframe>`;
                navigator.clipboard.writeText(embedCode).then(() => {
                    hideCopyConfirmation();
                    showCopyNotification();
                }).catch(err => {
                    console.error('Failed to copy:', err);
                    alert('Failed to copy embed code');
                    hideCopyConfirmation();
                });
            }
        });

        function showCopyNotification() {
            const notification = document.getElementById('copyNotification');
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        function replaceVideo(videoId, input) {
            if (input.files && input.files[0]) {
                const formData = new FormData();
                formData.append('video', input.files[0]);
                
                fetch(`/video/${videoId}/replace`, {
                    method: 'POST',
                    body: formData
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to replace video');
                    }
                });
            }
        }

        function toggleTheme() {
            const html = document.documentElement;
            const newTheme = html.classList.contains('dark') ? 'light' : 'dark';
            
            fetch('/theme', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ theme: newTheme })
            }).then(response => {
                if (response.ok) {
                    html.classList.toggle('dark');
                }
            });
        }

        document.getElementById('uploadForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const uploadWarning = document.getElementById('uploadWarning');
            
            progressContainer.classList.remove('hidden');
            uploadWarning.classList.remove('hidden');
            
            const xhr = new XMLHttpRequest();
            
            xhr.upload.addEventListener('progress', function(e) {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    progressBar.style.width = percentComplete + '%';
                    progressBar.textContent = percentComplete.toFixed(1) + '%';
                }
            });
            
            xhr.addEventListener('load', function() {
                if (xhr.status === 200) {
                    window.location.reload();
                } else {
                    const response = JSON.parse(xhr.responseText);
                    alert(response.error || 'Upload failed');
                    progressContainer.classList.add('hidden');
                    uploadWarning.classList.add('hidden');
                }
            });
            
            xhr.addEventListener('error', function() {
                alert('Upload failed');
                progressContainer.classList.add('hidden');
                uploadWarning.classList.add('hidden');
            });
            
            xhr.open('POST', '/upload', true);
            xhr.send(formData);
        });
    </script>
</body>
</html>